// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    relationMode = "prisma"
    url          = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    tagline       String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    onboarded     Boolean   @default(false)
    accounts      Account[]
    sessions      Session[]
    verified      Boolean   @default(false)
    admin         Boolean   @default(false)

    outfitPostCount   Int @default(0)
    hoodiePostCount   Int @default(0)
    shirtPostCount    Int @default(0)
    pantsPostCount    Int @default(0)
    shoesPostCount    Int @default(0)
    watchPostCount    Int @default(0)
    headwearPostCount Int @default(0)
    jewelryPostCount  Int @default(0)
    glassesPostCount  Int @default(0)
    imageCount        Int @default(0)
    likeCount         Int @default(0)

    links Link[]

    posts           Post[]
    likedPosts      Post[]     @relation("PostLikes")
    postReactions   Reaction[]
    wishlistedPosts Post[]     @relation("Wishlists")

    likedBy User[] @relation("Likes")
    liked   User[] @relation("Likes")

    createdReports Report[]
    reports        Report[] @relation("ReportedUser")

    notifications     Notification[] @relation("Notifications")
    sentNotifications Notification[] @relation("SentNotifications")

    lanyardEnabled Boolean @default(false)
    hideLanyard    Boolean @default(false)
}

model Link {
    id   String   @id @default(cuid())
    type LinkType
    url  String

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Post {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    featured  Boolean  @default(false)

    type  PostType
    image String?

    reports       Report[]       @relation("ReportedPost")
    notifications Notification[] @relation("Notifications")
    likes         User[]         @relation("PostLikes")
    likeCount     Int            @default(0)
    wishlists     User[]         @relation("Wishlists")
    reactions     Reaction[]

    @@index([userId])
}

model Report {
    id             String     @id @default(cuid())
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
    creatorId      String
    creator        User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    reason         String
    resolved       Boolean    @default(false)
    type           ReportType
    reportedUser   User?      @relation("ReportedUser", fields: [reportedUserId], references: [id], onDelete: Cascade)
    reportedUserId String?
    reportedPost   Post?      @relation("ReportedPost", fields: [reportedPostId], references: [id], onDelete: Cascade)
    reportedPostId String?

    @@index([creatorId])
    @@index([reportedPostId])
    @@index([reportedUserId])
}

model Notification {
    id           String           @id @default(cuid())
    createdAt    DateTime         @default(now())
    updatedAt    DateTime         @updatedAt
    targetUserId String
    targetUser   User             @relation("Notifications", fields: [targetUserId], references: [id], onDelete: Cascade)
    type         NotificationType
    read         Boolean          @default(false)
    postId       String?
    post         Post?            @relation("Notifications", fields: [postId], references: [id], onDelete: Cascade)
    userId       String?
    user         User?            @relation("SentNotifications", fields: [userId], references: [id], onDelete: Cascade)
    message      String?
    link         String?

    @@index([targetUserId])
    @@index([postId])
    @@index([userId])
}

model Reaction {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    postId    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    content   String

    @@index([userId])
    @@index([postId])
}

enum NotificationType {
    PROFILE_LIKE
    POST_LIKE
    POST_REACTION
    OTHER
}

enum PostType {
    OUTFIT
    HOODIE
    SHIRT
    PANTS
    SHOES
    WATCH
    HEADWEAR
    JEWELRY
    GLASSES
}

enum LinkType {
    INSTAGRAM
    TWITTER
    YOUTUBE
    TIKTOK
    DISCORD
    WEBSITE
    GITHUB
}

enum ReportType {
    USER
    POST
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
